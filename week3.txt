This is a text file, it can be accessed with a text editor, like nano,
vim, or notepad. 

Shell scripts or batch files can be written in a text editor, and let 
you store commands to be executed sequentially later when the file is 
run. These files are saved with a .sh (macos/linux) or .bat (windows) 
extension. In windows, the .bat extension alone is enough to tell 
the windows command line to run each line in the file through its 
interpreter. For unix shell scripts, however, a "shebang" needs to 
be included in the first line of the file to specify that the bash 
interpreter should be used for the proceeding lines: 

#!/bin/bash

There are other sheabangs for other interpreters:

#!/usr/bin/python3
#!/usr/bin/ruby

After the shebang, or on the first line for windows batch files, 
you simply write the commands you want executed in the order you 
want them done.

Unix:
#!/bin/bash
echo "Hello, world!"
pwd
ls

This is a very simple example of a shell script. It will print "Hello, 
world!", then tell you the current directory in the shell, then list 
the files and subdirectories in the current directory. For security, 
each file on your computer comes with permissions, these can be 
read-only, write-only, executable, or some combination of these. There 
are also permission groups (user, group, public, etc). You can view 
permissions with "ls -l" which will give an output like:

-rw-r--r--@
drwx------@ 

This format is a '-', 'd', or 'l' follow by three sections of three 
characters each. The sections are read/write/execute or 'rwx'. A dash 
indicates that the permission isn't granted, while a letter shows that 
it is. The first section is the user, the second section is the group, 
and the third is public. The latter two types aren't relevant for this 
class, it's more of a system administrator thing where they establish 
who can access certain files on a shared system. 

There's also a numeric method, where the three sections (users, group, 
public) are described by a single number each. 4 is readable, 2 is 
writable, and 1 is executable. These numbers can be added in any 
combination to get a unique number which completely describes the 
permissions. The following are the numeric equivalents of the above 
examples:

644
700

Sidenote: the super user (unix) or admin (windows) can access any file 
or execute any command regardless of permissions. They can even 
execute commands that permanently alter or delete parts of the 
operating system, so be careful using it. You can change to super user 
mode with "su" or execute a single command as super user with "sudo".

To change permissions, use the "chmod" command:
$ chmod +x myscript.sh

To run the script, either navigate to the directory where the script 
is saved and type the script name "myscript.sh", or type the entire 
filepath "/users/nick/documents/myscript.sh". Scripts can be saved to 
the PATH to make them universally executable without the full 
filepath. 

#####################################################################
Python

The terminal/command line can run python in its own pseudo-console 
form from the console. If Python is installed properly, it will add a 
reference to itself in the PATH to make itself executable from the 
console. To find your system's PATH use "echo $PATH", it will most 
likely be /usr/bin, but it's probably buried in several options 
for the PATH. Once you've found it, confirm the name of your python 
version with "ls PATH", or get fancy with "ls PATH | grep python". For 
me, this look like:

$ ls /usr/bin | grep python

With the output:

python3

Once you've identified the name of your python file (eg "python3"), 
you just type that into the terminal to run the program. This works 
for other items in the PATH as well. Running your python program will 
start your python console, from which you can write python commands.

$ print("Hello, world!")

####################################################################
Switch to week3.py here
